{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/toor/Desktop/Ishay/ReactApps/client/src/Config.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport MaterialTable from 'material-table';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport { forwardRef } from 'react'; // //JSON data from RESTful API\n// var user = {\n//     \"user\":\n//     {\n//         \"id\": 2,\n//         \"email\": \"janet.weaver@reqres.in\",\n//         \"first_name\": \"Janet\",\n//         \"last_name\": \"Weaver\",\n//     }\n// }\n// var columns = [\n//     { title: \"id\", field: \"id\", hidden: true },\n//     { title: \"First name\", field: \"first_name\" },\n//     { title: \"Last name\", field: \"last_name\" },\n//     { title: \"email\", field: \"email\" }\n// ]\n// const tableIcons = {\n//     Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n//     Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n//     Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n//     Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n//     DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n//     Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n//     Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n//     Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n//     FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n//     LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n//     NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n//     PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n//     ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n//     Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n//     SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n//     ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n//     ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n//   };\n\nexport default function Config() {\n  _s();\n\n  const [data, setData] = useState([]); //table data\n\n  useEffect(() => {\n    setData(user.data);\n  });\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"H\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this) // <MaterialTable\n  //     title=\"User list from API\"\n  //     columns={columns}\n  //     data={data}\n  //     icons={tableIcons}\n  //     editable={{\n  //         onRowUpdate: (newData, oldData) =>\n  //             new Promise((resolve) => {\n  //                 handleRowUpdate(newData, oldData, resolve);\n  //             }),\n  //         onRowAdd: (newData) =>\n  //             new Promise((resolve) => {\n  //                 handleRowAdd(newData, resolve)\n  //             }),\n  //         onRowDelete: (oldData) =>\n  //             new Promise((resolve) => {\n  //                 handleRowDelete(oldData, resolve)\n  //             }),\n  //     }}\n  // />\n  ;\n}\n\n_s(Config, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = Config;\n\nconst handleRowAdd = (newData, resolve) => {// //validation\n  // let errorList = []\n  // if (newData.first_name === undefined) {\n  //     errorList.push(\"Please enter first name\")\n  // }\n  // if (newData.last_name === undefined) {\n  //     errorList.push(\"Please enter last name\")\n  // }\n  // if (newData.email === undefined || validateEmail(newData.email) === false) {\n  //     errorList.push(\"Please enter a valid email\")\n  // }\n  // if (errorList.length < 1) { //no error\n  //     api.post(\"/users\", newData)\n  //         .then(res => {\n  //             let dataToAdd = [...data];\n  //             dataToAdd.push(newData);\n  //             setData(dataToAdd);\n  //             resolve()\n  //             setErrorMessages([])\n  //             setIserror(false)\n  //         })\n  //         .catch(error => {\n  //             setErrorMessages([\"Cannot add data. Server error!\"])\n  //             setIserror(true)\n  //             resolve()\n  //         })\n  // } else {\n  //     setErrorMessages(errorList)\n  //     setIserror(true)\n  //     resolve()\n  // }\n};\n\nconst handleRowUpdate = (newData, oldData, resolve) => {// //validation\n  // if (errorList.length < 1) {\n  //     api.patch(\"/users/\" + newData.id, newData)\n  //         .then(res => {\n  //             const dataUpdate = [...data];\n  //             const index = oldData.tableData.id;\n  //             dataUpdate[index] = newData;\n  //             setData([...dataUpdate]);\n  //             resolve()\n  //             setIserror(false)\n  //             setErrorMessages([])\n  //         })\n  //         .catch(error => {\n  //             setErrorMessages([\"Update failed! Server error\"])\n  //             setIserror(true)\n  //             resolve()\n  //         })\n  // } else {\n  //     setErrorMessages(errorList)\n  //     setIserror(true)\n  //     resolve()\n  // }\n};\n\nconst handleRowDelete = (oldData, resolve) => {// api.delete(\"/users/\" + oldData.id)\n  //     .then(res => {\n  //         const dataDelete = [...data];\n  //         const index = oldData.tableData.id;\n  //         dataDelete.splice(index, 1);\n  //         setData([...dataDelete]);\n  //         resolve()\n  //     })\n  //     .catch(error => {\n  //         setErrorMessages([\"Delete failed! Server error\"])\n  //         setIserror(true)\n  //         resolve()\n  //     })\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Config\");","map":{"version":3,"sources":["/home/toor/Desktop/Ishay/ReactApps/client/src/Config.js"],"names":["React","useEffect","useState","Axios","MaterialTable","AddBox","ArrowDownward","Check","ChevronLeft","ChevronRight","Clear","DeleteOutline","Edit","FilterList","FirstPage","LastPage","Remove","SaveAlt","Search","ViewColumn","forwardRef","Config","data","setData","user","handleRowAdd","newData","resolve","handleRowUpdate","oldData","handleRowDelete"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,EAAD,CAAhC,CAD6B,CACS;;AAEtCD,EAAAA,SAAS,CAAC,MAAM;AACZsB,IAAAA,OAAO,CAACC,IAAI,CAACF,IAAN,CAAP;AACH,GAFQ,CAAT;AAIA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBJ;AAuBH;;GA9BuBD,M;;KAAAA,M;;AAgCxB,MAAMI,YAAY,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,CACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAhCD;;AAkCA,MAAMC,eAAe,GAAG,CAACF,OAAD,EAAUG,OAAV,EAAmBF,OAAnB,KAA+B,CACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAvBD;;AAyBA,MAAMG,eAAe,GAAG,CAACD,OAAD,EAAUF,OAAV,KAAsB,CAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAdD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Axios from 'axios';\nimport MaterialTable from 'material-table'\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport { forwardRef } from 'react';\n\n\n// //JSON data from RESTful API\n// var user = {\n//     \"user\":\n//     {\n//         \"id\": 2,\n//         \"email\": \"janet.weaver@reqres.in\",\n//         \"first_name\": \"Janet\",\n//         \"last_name\": \"Weaver\",\n//     }\n// }\n\n// var columns = [\n//     { title: \"id\", field: \"id\", hidden: true },\n//     { title: \"First name\", field: \"first_name\" },\n//     { title: \"Last name\", field: \"last_name\" },\n//     { title: \"email\", field: \"email\" }\n// ]\n\n// const tableIcons = {\n//     Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n//     Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n//     Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n//     Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n//     DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n//     Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n//     Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n//     Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n//     FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n//     LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n//     NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n//     PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n//     ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n//     Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n//     SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n//     ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n//     ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n//   };\n\n\nexport default function Config() {\n    const [data, setData] = useState([]); //table data\n\n    useEffect(() => {\n        setData(user.data)\n    })\n\n    return (\n        <h1>H</h1>\n        // <MaterialTable\n        //     title=\"User list from API\"\n        //     columns={columns}\n        //     data={data}\n        //     icons={tableIcons}\n        //     editable={{\n        //         onRowUpdate: (newData, oldData) =>\n        //             new Promise((resolve) => {\n        //                 handleRowUpdate(newData, oldData, resolve);\n        //             }),\n        //         onRowAdd: (newData) =>\n        //             new Promise((resolve) => {\n        //                 handleRowAdd(newData, resolve)\n        //             }),\n        //         onRowDelete: (oldData) =>\n        //             new Promise((resolve) => {\n        //                 handleRowDelete(oldData, resolve)\n        //             }),\n        //     }}\n        // />\n    )\n}\n\nconst handleRowAdd = (newData, resolve) => {\n    // //validation\n    // let errorList = []\n    // if (newData.first_name === undefined) {\n    //     errorList.push(\"Please enter first name\")\n    // }\n    // if (newData.last_name === undefined) {\n    //     errorList.push(\"Please enter last name\")\n    // }\n    // if (newData.email === undefined || validateEmail(newData.email) === false) {\n    //     errorList.push(\"Please enter a valid email\")\n    // }\n    // if (errorList.length < 1) { //no error\n    //     api.post(\"/users\", newData)\n    //         .then(res => {\n    //             let dataToAdd = [...data];\n    //             dataToAdd.push(newData);\n    //             setData(dataToAdd);\n    //             resolve()\n    //             setErrorMessages([])\n    //             setIserror(false)\n    //         })\n    //         .catch(error => {\n    //             setErrorMessages([\"Cannot add data. Server error!\"])\n    //             setIserror(true)\n    //             resolve()\n    //         })\n    // } else {\n    //     setErrorMessages(errorList)\n    //     setIserror(true)\n    //     resolve()\n    // }\n}\n\nconst handleRowUpdate = (newData, oldData, resolve) => {\n    // //validation\n    // if (errorList.length < 1) {\n    //     api.patch(\"/users/\" + newData.id, newData)\n    //         .then(res => {\n    //             const dataUpdate = [...data];\n    //             const index = oldData.tableData.id;\n    //             dataUpdate[index] = newData;\n    //             setData([...dataUpdate]);\n    //             resolve()\n    //             setIserror(false)\n    //             setErrorMessages([])\n    //         })\n    //         .catch(error => {\n    //             setErrorMessages([\"Update failed! Server error\"])\n    //             setIserror(true)\n    //             resolve()\n    //         })\n    // } else {\n    //     setErrorMessages(errorList)\n    //     setIserror(true)\n    //     resolve()\n    // }\n}\n\nconst handleRowDelete = (oldData, resolve) => {\n    // api.delete(\"/users/\" + oldData.id)\n    //     .then(res => {\n    //         const dataDelete = [...data];\n    //         const index = oldData.tableData.id;\n    //         dataDelete.splice(index, 1);\n    //         setData([...dataDelete]);\n    //         resolve()\n    //     })\n    //     .catch(error => {\n    //         setErrorMessages([\"Delete failed! Server error\"])\n    //         setIserror(true)\n    //         resolve()\n    //     })\n}"]},"metadata":{},"sourceType":"module"}