{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/toor/Desktop/Ishay/ReactApps/client/src/Modal.js\";\nimport React, { Component } from 'react';\nimport './modal.css';\n\nclass Modal extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSave = this.handleSave.bind(this);\n    this.state = {\n      SessionName: '',\n      SyncDirectory: {},\n      Bandwidth: '',\n      modification: '',\n      errors: {},\n      show: true\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      SessionName: nextProps.SessionName,\n      SyncDirectory: {\n        'Path': nextProps.SyncDirectory.Path\n      },\n      Bandwidth: {\n        'Rate': nextProps.Bandwidth.Rate\n      },\n      modification: nextProps.Modification\n    });\n  }\n\n  stateHandler(stateName, e) {\n    this.setState({\n      [stateName]: e.target.value\n    });\n  }\n\n  innerStateHandler(stateName, innerStateName, e) {\n    this.setState({\n      [stateName]: {\n        [innerStateName]: e.target.value\n      }\n    });\n  }\n\n  handleValidation() {\n    const item = this.state;\n    const errors = [];\n    let formIsValid = true; //validate name\n\n    if (!item.SessionName) {\n      formIsValid = false;\n      errors[\"name\"] = \"Cannot be empty\";\n    }\n\n    if (typeof item.SessionName !== \"undefined\") {\n      if (!item.SessionName.match(/^[a-zA-Z]+$/)) {\n        formIsValid = false;\n        errors[\"name\"] = \"Only letters\";\n      }\n    }\n\n    this.setState({\n      errors: errors\n    });\n    return formIsValid;\n  }\n\n  handleSave() {\n    if (!this.handleValidation()) {\n      this.forceUpdate();\n    }\n\n    const item = this.state;\n    console.log(this.state.modification);\n    this.props.saveModalDetails(item, this.state.modification);\n  }\n\n  handleClose() {\n    this.state.show = false;\n  }\n\n  handleShow() {\n    this.setState(state);\n    this.state.show = true;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        variant: \"primary\",\n        onClick: this.handleShow,\n        children: \"Launch static backdrop modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: this.state.show,\n        onHide: this.handleClose,\n        backdrop: \"static\",\n        keyboard: false,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Modal title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: \"I will not close if you click outside me. Don't even try to press escape key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            variant: \"secondary\",\n            onClick: this.handleClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            variant: \"primary\",\n            children: \"Understood\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n} // render() {\n//     return (\n//         <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//             <div className=\"modal-dialog\" role=\"document\">\n//                 <div className=\"modal-content\">\n//                     <div className=\"modal-header\">\n//                         <h5 className=\"modal-title\" id=\"exampleModalLabel\">Editing session</h5>\n//                         <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n//                             <span aria-hidden=\"true\">&times;</span>\n//                         </button>\n//                     </div>\n//                     <div>\n//                         <div className=\"content\">\n//                             <span className=\"modal-lable\">Session Name:</span>\n//                             <input value={this.state.SessionName} type=\"text\"  onChange={(e) => this.stateHandler('SessionName', e)} />\n//                         </div>\n//                         <div className=\"content\">\n//                             <span className=\"modal-lable\">Sync Directory:</span>\n//                             <input value={this.state.SyncDirectory.Path} type=\"text\"  onChange={(e) => this.innerStateHandler('SyncDirectory', 'Path', e)} />\n//                         </div>\n//                         <div className=\"content\">\n//                             <span className=\"modal-lable\">Bandwidth:</span>\n//                             <input value={this.state.Bandwidth.Rate} type=\"text\"  onChange={(e) => this.innerStateHandler('Bandwidth', 'Rate', e)} />\n//                         </div>\n//                         </div>\n//                     <div className=\"modal-footer\">\n//                         <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n//                         <button type=\"button\" className=\"btn btn-primary\"   onClick={() => { this.handleSave() }}>Save changes</button>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n//}\n\n\nexport default Modal;","map":{"version":3,"sources":["/home/toor/Desktop/Ishay/ReactApps/client/src/Modal.js"],"names":["React","Component","Modal","constructor","props","handleSave","bind","state","SessionName","SyncDirectory","Bandwidth","modification","errors","show","componentWillReceiveProps","nextProps","setState","Path","Rate","Modification","stateHandler","stateName","e","target","value","innerStateHandler","innerStateName","handleValidation","item","formIsValid","match","forceUpdate","console","log","saveModalDetails","handleClose","handleShow","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './modal.css'\n\n\nclass Modal extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSave = this.handleSave.bind(this);\n        this.state = {\n            SessionName: '',\n            SyncDirectory: {},\n            Bandwidth: '',\n            modification: '',\n            errors: {},\n            show: true\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            SessionName: nextProps.SessionName,\n            SyncDirectory: { 'Path': nextProps.SyncDirectory.Path },\n            Bandwidth: { 'Rate': nextProps.Bandwidth.Rate },\n            modification: nextProps.Modification\n        });\n    }\n\n    stateHandler(stateName, e) {\n        this.setState({ [stateName]: e.target.value })\n    }\n\n    innerStateHandler(stateName, innerStateName, e) {\n        this.setState({ [stateName]: { [innerStateName]: e.target.value } })\n    }\n    handleValidation(){\n        const item = this.state;\n        const errors = [];\n        let formIsValid = true;\n        //validate name\n        if(!item.SessionName){\n            formIsValid = false;\n            errors[\"name\"] = \"Cannot be empty\";\n        }\n   \n         if(typeof item.SessionName !== \"undefined\"){\n            if(!item.SessionName.match(/^[a-zA-Z]+$/)){\n               formIsValid = false;\n               errors[\"name\"] = \"Only letters\";\n            }        \n         }\n         this.setState({errors: errors});\n         return formIsValid\n    }\n    handleSave() {\n        if(!this.handleValidation())\n        {\n            \n            this.forceUpdate()\n        }\n        const item = this.state;\n        console.log(this.state.modification);\n        this.props.saveModalDetails(item, this.state.modification)\n    }\n\n    handleClose()\n    {\n        this.state.show = false;\n    }\n    handleShow()\n    {\n        this.setState(state)\n        this.state.show = true;\n    }\n\n   render() {\n\n\n        return (\n            <>\n            <button variant=\"primary\" onClick={this.handleShow}>\n              Launch static backdrop modal\n            </button>\n      \n            <Modal\n              show={this.state.show}\n              onHide={this.handleClose}\n              backdrop=\"static\"\n              keyboard={false}\n            >\n              <Modal.Header closeButton>\n                <Modal.Title>Modal title</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                I will not close if you click outside me. Don't even try to press\n                escape key.\n              </Modal.Body>\n              <Modal.Footer>\n                <button variant=\"secondary\" onClick={this.handleClose}>\n                  Close\n                </button>\n                <button variant=\"primary\">Understood</button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        );\n    }\n\n}\n\n\n\n\n\n\n    \n\n    // render() {\n    //     return (\n    //         <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n    //             <div className=\"modal-dialog\" role=\"document\">\n    //                 <div className=\"modal-content\">\n    //                     <div className=\"modal-header\">\n    //                         <h5 className=\"modal-title\" id=\"exampleModalLabel\">Editing session</h5>\n    //                         <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n    //                             <span aria-hidden=\"true\">&times;</span>\n    //                         </button>\n    //                     </div>\n    //                     <div>\n    //                         <div className=\"content\">\n    //                             <span className=\"modal-lable\">Session Name:</span>\n    //                             <input value={this.state.SessionName} type=\"text\"  onChange={(e) => this.stateHandler('SessionName', e)} />\n    //                         </div>\n                            \n    //                         <div className=\"content\">\n    //                             <span className=\"modal-lable\">Sync Directory:</span>\n    //                             <input value={this.state.SyncDirectory.Path} type=\"text\"  onChange={(e) => this.innerStateHandler('SyncDirectory', 'Path', e)} />\n    //                         </div>\n    //                         <div className=\"content\">\n    //                             <span className=\"modal-lable\">Bandwidth:</span>\n    //                             <input value={this.state.Bandwidth.Rate} type=\"text\"  onChange={(e) => this.innerStateHandler('Bandwidth', 'Rate', e)} />\n    //                         </div>\n    //                         </div>\n    //                     <div className=\"modal-footer\">\n    //                         <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n    //                         <button type=\"button\" className=\"btn btn-primary\"   onClick={() => { this.handleSave() }}>Save changes</button>\n    //                     </div>\n    //                 </div>\n    //             </div>\n    //         </div>\n    //     );\n    // }\n//}\n\nexport default Modal;"]},"metadata":{},"sourceType":"module"}