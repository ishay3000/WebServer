{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/toor/Desktop/Ishay/ReactApps/client/src/Modal.js\";\nimport React, { Component } from 'react';\nimport './modal.css';\nimport { Modal, Button } from \"react-bootstrap\";\n\nclass Modal2 extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    this.state = {\n      SessionName: '',\n      SyncDirectory: {},\n      Bandwidth: '',\n      modification: '',\n      errors: {},\n      show: true\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      SessionName: nextProps.SessionName,\n      SyncDirectory: {\n        'Path': nextProps.SyncDirectory.Path\n      },\n      Bandwidth: {\n        'Rate': nextProps.Bandwidth.Rate\n      },\n      modification: nextProps.Modification\n    });\n  }\n\n  stateHandler(stateName, e) {\n    this.setState({\n      [stateName]: e.target.value\n    });\n  }\n\n  innerStateHandler(stateName, innerStateName, e) {\n    this.setState({\n      [stateName]: {\n        [innerStateName]: e.target.value\n      }\n    });\n  }\n\n  handleValidation() {\n    const item = this.state;\n    const errors = [];\n    let formIsValid = true; //validate name\n\n    if (!item.SessionName) {\n      formIsValid = false;\n      errors[\"name\"] = \"Cannot be empty\";\n    }\n\n    if (typeof item.SessionName !== \"undefined\") {\n      if (!item.SessionName.match(/^[a-zA-Z]+$/)) {\n        formIsValid = false;\n        errors[\"name\"] = \"Only letters\";\n      }\n    }\n\n    this.setState({\n      errors: errors\n    });\n    return formIsValid;\n  }\n\n  handleSave() {\n    if (!this.handleValidation()) {\n      this.forceUpdate();\n    }\n\n    const item = this.state;\n    console.log(this.state.modification);\n    this.props.saveModalDetails(item, this.state.modification);\n  }\n\n  handleClose() {\n    this.setState({\n      show: false\n    });\n  }\n\n  handleShow() {\n    this.setState({\n      show: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: this.handleShow,\n        children: \"Launch static backdrop modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: this.state.show,\n        onHide: this.handleClose,\n        backdrop: \"static\",\n        keyboard: false,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Modal title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"modal-lable\",\n              children: \"Session Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              value: this.state.SessionName,\n              type: \"text\",\n              onChange: e => this.stateHandler('SessionName', e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"modal-lable\",\n              children: \"Sync Directory:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              value: this.state.SyncDirectory.Path,\n              type: \"text\",\n              onChange: e => this.innerStateHandler('SyncDirectory', 'Path', e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 50\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"modal-lable\",\n              children: \"Bandwidth:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              value: this.state.Bandwidth.Rate,\n              type: \"text\",\n              onChange: e => this.innerStateHandler('Bandwidth', 'Rate', e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: this.handleClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            children: \"Understood\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n} // render() {\n//     return (\n//         <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//             <div className=\"modal-dialog\" role=\"document\">\n//                 <div className=\"modal-content\">\n//                     <div className=\"modal-header\">\n//                         <h5 className=\"modal-title\" id=\"exampleModalLabel\">Editing session</h5>\n//                         <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n//                             <span aria-hidden=\"true\">&times;</span>\n//                         </button>\n//                     </div>\n//                     <div>\n//                         <div className=\"content\">\n//                             <span className=\"modal-lable\">Session Name:</span>\n//                             <input value={this.state.SessionName} type=\"text\"  onChange={(e) => this.stateHandler('SessionName', e)} />\n//                         </div>\n//                         <div className=\"content\">\n//                             <span className=\"modal-lable\">Sync Directory:</span>\n//                             <input value={this.state.SyncDirectory.Path} type=\"text\"  onChange={(e) => this.innerStateHandler('SyncDirectory', 'Path', e)} />\n//                         </div>\n//                         <div className=\"content\">\n//                             <span className=\"modal-lable\">Bandwidth:</span>\n//                             <input value={this.state.Bandwidth.Rate} type=\"text\"  onChange={(e) => this.innerStateHandler('Bandwidth', 'Rate', e)} />\n//                         </div>\n//                         </div>\n//                     <div className=\"modal-footer\">\n//                         <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n//                         <button type=\"button\" className=\"btn btn-primary\"   onClick={() => { this.handleSave() }}>Save changes</button>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n//}\n\n\nexport default Modal2;","map":{"version":3,"sources":["/home/toor/Desktop/Ishay/ReactApps/client/src/Modal.js"],"names":["React","Component","Modal","Button","Modal2","constructor","props","handleSave","bind","handleClose","handleShow","state","SessionName","SyncDirectory","Bandwidth","modification","errors","show","componentWillReceiveProps","nextProps","setState","Path","Rate","Modification","stateHandler","stateName","e","target","value","innerStateHandler","innerStateName","handleValidation","item","formIsValid","match","forceUpdate","console","log","saveModalDetails","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './modal.css'\nimport { Modal, Button } from \"react-bootstrap\";\n\n\nclass Modal2 extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSave = this.handleSave.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleShow = this.handleShow.bind(this);\n\n        this.state = {\n            SessionName: '',\n            SyncDirectory: {},\n            Bandwidth: '',\n            modification: '',\n            errors: {},\n            show: true\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            SessionName: nextProps.SessionName,\n            SyncDirectory: { 'Path': nextProps.SyncDirectory.Path },\n            Bandwidth: { 'Rate': nextProps.Bandwidth.Rate },\n            modification: nextProps.Modification\n        });\n    }\n    stateHandler(stateName, e) {\n        this.setState({ [stateName]: e.target.value })\n    }\n\n    innerStateHandler(stateName, innerStateName, e) {\n        this.setState({ [stateName]: { [innerStateName]: e.target.value } })\n    }\n    handleValidation() {\n        const item = this.state;\n        const errors = [];\n        let formIsValid = true;\n        //validate name\n        if (!item.SessionName) {\n            formIsValid = false;\n            errors[\"name\"] = \"Cannot be empty\";\n        }\n\n        if (typeof item.SessionName !== \"undefined\") {\n            if (!item.SessionName.match(/^[a-zA-Z]+$/)) {\n                formIsValid = false;\n                errors[\"name\"] = \"Only letters\";\n            }\n        }\n        this.setState({ errors: errors });\n        return formIsValid\n    }\n    handleSave() {\n        if (!this.handleValidation()) {\n\n            this.forceUpdate()\n        }\n        const item = this.state;\n        console.log(this.state.modification);\n        this.props.saveModalDetails(item, this.state.modification)\n    }\n\n    handleClose() {\n        this.setState({ show: false })\n\n    }\n    handleShow() {\n        this.setState({ show: true })\n\n    }\n\n    render() {\n\n\n        return (\n            <>\n                { <Button variant=\"primary\" onClick={this.handleShow}>\n                    Launch static backdrop modal\n            </Button>}\n\n                <Modal\n                    show={this.state.show}\n                    onHide={this.handleClose}\n                    backdrop=\"static\"\n                    keyboard={false}\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title>Modal title</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className=\"content\">\n                            <span className=\"modal-lable\">Session Name:</span>\n                            <input value={this.state.SessionName} type=\"text\" onChange={(e) => this.stateHandler('SessionName', e)} />\n                        </div>\n                                                 <div className=\"content\">\n                             <span className=\"modal-lable\">Sync Directory:</span>\n                             <input value={this.state.SyncDirectory.Path} type=\"text\"  onChange={(e) => this.innerStateHandler('SyncDirectory', 'Path', e)} />\n                         </div>\n                         <div className=\"content\">\n                             <span className=\"modal-lable\">Bandwidth:</span>\n                             <input value={this.state.Bandwidth.Rate} type=\"text\"  onChange={(e) => this.innerStateHandler('Bandwidth', 'Rate', e)} />\n                         </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        {\n                            <Button variant=\"secondary\" onClick={this.handleClose}>\n                                Close\n                    </Button>\n                        }\n                        <Button variant=\"primary\">Understood</Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n\n}\n\n\n\n\n\n\n\n\n// render() {\n//     return (\n//         <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//             <div className=\"modal-dialog\" role=\"document\">\n//                 <div className=\"modal-content\">\n//                     <div className=\"modal-header\">\n//                         <h5 className=\"modal-title\" id=\"exampleModalLabel\">Editing session</h5>\n//                         <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n//                             <span aria-hidden=\"true\">&times;</span>\n//                         </button>\n//                     </div>\n//                     <div>\n//                         <div className=\"content\">\n//                             <span className=\"modal-lable\">Session Name:</span>\n//                             <input value={this.state.SessionName} type=\"text\"  onChange={(e) => this.stateHandler('SessionName', e)} />\n//                         </div>\n\n//                         <div className=\"content\">\n//                             <span className=\"modal-lable\">Sync Directory:</span>\n//                             <input value={this.state.SyncDirectory.Path} type=\"text\"  onChange={(e) => this.innerStateHandler('SyncDirectory', 'Path', e)} />\n//                         </div>\n//                         <div className=\"content\">\n//                             <span className=\"modal-lable\">Bandwidth:</span>\n//                             <input value={this.state.Bandwidth.Rate} type=\"text\"  onChange={(e) => this.innerStateHandler('Bandwidth', 'Rate', e)} />\n//                         </div>\n//                         </div>\n//                     <div className=\"modal-footer\">\n//                         <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n//                         <button type=\"button\" className=\"btn btn-primary\"   onClick={() => { this.handleSave() }}>Save changes</button>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n//}\n\nexport default Modal2;"]},"metadata":{},"sourceType":"module"}