{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/toor/Desktop/Ishay/ReactApps/client/src/Modal.js\";\nimport React, { Component } from 'react';\nimport './modal.css';\n\nclass Modal extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSave = this.handleSave.bind(this);\n    this.state = {\n      SessionName: '',\n      SyncDirectory: {},\n      Bandwidth: '',\n      modification: '',\n      errors: {}\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      SessionName: nextProps.SessionName,\n      SyncDirectory: {\n        'Path': nextProps.SyncDirectory.Path\n      },\n      Bandwidth: {\n        'Rate': nextProps.Bandwidth.Rate\n      },\n      modification: nextProps.Modification\n    });\n  }\n\n  stateHandler(stateName, e) {\n    this.setState({\n      [stateName]: e.target.value\n    });\n  }\n\n  innerStateHandler(stateName, innerStateName, e) {\n    this.setState({\n      [stateName]: {\n        [innerStateName]: e.target.value\n      }\n    });\n  }\n\n  handleValidation() {\n    const item = this.state;\n    const errors = [];\n    let formIsValid = true; //validate name\n\n    if (!item.SessionName) {\n      formIsValid = false;\n      errors[\"name\"] = \"Cannot be empty\";\n    }\n\n    if (typeof item.SessionName !== \"undefined\") {\n      if (!item.SessionName.match(/^[a-zA-Z]+$/)) {\n        formIsValid = false;\n        errors[\"name\"] = \"Only letters\";\n      }\n    }\n\n    this.setState({\n      errors: errors\n    });\n    return formIsValid;\n  }\n\n  handleSave() {\n    this.handleValidation();\n    const item = this.state;\n    console.log(this.state.modification);\n    this.props.saveModalDetails(item, this.state.modification);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal fade\",\n      id: \"exampleModal\",\n      tabIndex: \"-1\",\n      role: \"dialog\",\n      \"aria-labelledby\": \"exampleModalLabel\",\n      \"aria-hidden\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog\",\n        role: \"document\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              id: \"exampleModalLabel\",\n              children: \"Editing session\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"close\",\n              \"data-dismiss\": \"modal\",\n              \"aria-label\": \"Close\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                \"aria-hidden\": \"true\",\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              ref: \"name\",\n              type: \"text\",\n              size: \"30\",\n              placeholder: \"Name\",\n              onChange: this.handleChange.bind(this, \"name\"),\n              value: this.state.SessionName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 49\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: \"red\"\n              },\n              children: this.state.errors[\"name\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 49\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 48\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              refs: \"syncDir\",\n              type: \"text\",\n              size: \"30\",\n              placeholder: \"syncDir\",\n              onChange: this.handleChange.bind(this, \"syncDir\"),\n              value: this.state.SyncDirectory.Path\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 47\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: \"red\"\n              },\n              children: this.state.errors[\"syncDir\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 47\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 47\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              refs: \"phone\",\n              type: \"text\",\n              size: \"30\",\n              placeholder: \"Phone\",\n              onChange: this.handleChange.bind(this, \"phone\"),\n              value: this.state.fields[\"phone\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 47\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 49\n          }, this)\n          /* <div>\n              <div className=\"content\">\n                  <span className=\"modal-lable\">Session Name:</span>\n                  <input value={this.state.SessionName} onChange={(e) => this.stateHandler('SessionName', e)} />\n              </div>\n              \n              <div className=\"content\">\n                  <span className=\"modal-lable\">Sync Directory:</span>\n                  <input value={this.state.SyncDirectory.Path} onChange={(e) => this.innerStateHandler('SyncDirectory', 'Path', e)} />\n              </div>\n              <div className=\"content\">\n                  <span className=\"modal-lable\">Bandwidth:</span>\n                  <input value={this.state.Bandwidth.Rate} onChange={(e) => this.innerStateHandler('Bandwidth', 'Rate', e)} />\n              </div>\n          </div> */\n          , /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-secondary\",\n              \"data-dismiss\": \"modal\",\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-primary\",\n              \"data-dismiss\": \"modal\",\n              onClick: () => {\n                this.handleSave();\n              },\n              children: \"Save changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Modal;","map":{"version":3,"sources":["/home/toor/Desktop/Ishay/ReactApps/client/src/Modal.js"],"names":["React","Component","Modal","constructor","props","handleSave","bind","state","SessionName","SyncDirectory","Bandwidth","modification","errors","componentWillReceiveProps","nextProps","setState","Path","Rate","Modification","stateHandler","stateName","e","target","value","innerStateHandler","innerStateName","handleValidation","item","formIsValid","match","console","log","saveModalDetails","render","handleChange","color","fields"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './modal.css'\n\nclass Modal extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSave = this.handleSave.bind(this);\n        this.state = {\n            SessionName: '',\n            SyncDirectory: {},\n            Bandwidth: '',\n            modification: '',\n            errors: {}\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            SessionName: nextProps.SessionName,\n            SyncDirectory: { 'Path': nextProps.SyncDirectory.Path },\n            Bandwidth: { 'Rate': nextProps.Bandwidth.Rate },\n            modification: nextProps.Modification\n        });\n    }\n\n    stateHandler(stateName, e) {\n        this.setState({ [stateName]: e.target.value })\n    }\n\n    innerStateHandler(stateName, innerStateName, e) {\n        this.setState({ [stateName]: { [innerStateName]: e.target.value } })\n    }\n    handleValidation(){\n        const item = this.state;\n        const errors = [];\n        let formIsValid = true;\n        //validate name\n        if(!item.SessionName){\n            formIsValid = false;\n            errors[\"name\"] = \"Cannot be empty\";\n         }\n   \n         if(typeof item.SessionName !== \"undefined\"){\n            if(!item.SessionName.match(/^[a-zA-Z]+$/)){\n               formIsValid = false;\n               errors[\"name\"] = \"Only letters\";\n            }        \n         }\nthis.setState({errors: errors});\n         return formIsValid\n    }\n    handleSave() {\n        this.handleValidation()\n        const item = this.state;\n        console.log(this.state.modification);\n        this.props.saveModalDetails(item, this.state.modification)\n    }\n\n    render() {\n        return (\n            <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Editing session</h5>\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        {\n                                                <fieldset>\n                                                <input ref=\"name\" type=\"text\" size=\"30\" placeholder=\"Name\" onChange={this.handleChange.bind(this, \"name\")} value={this.state.SessionName}/>\n                                                <span style={{color: \"red\"}}>{this.state.errors[\"name\"]}</span>\n                                               <br/>\n                                              <input refs=\"syncDir\" type=\"text\" size=\"30\" placeholder=\"syncDir\" onChange={this.handleChange.bind(this, \"syncDir\")} value={this.state.SyncDirectory.Path}/>\n                                              <span style={{color: \"red\"}}>{this.state.errors[\"syncDir\"]}</span>\n                                              <br/>\n                                              <input refs=\"phone\" type=\"text\" size=\"30\" placeholder=\"Phone\" onChange={this.handleChange.bind(this, \"phone\")} value={this.state.fields[\"phone\"]}/>\n                                              {/* <br/>\n                                              <input refs=\"address\" type=\"text\" size=\"30\" placeholder=\"Address\" onChange={this.handleChange.bind(this, \"address\")} value={this.state.fields[\"address\"]}/>\n                                              <br/> */}\n                                          </fieldset>\n                        \n                        /* <div>\n                            <div className=\"content\">\n                                <span className=\"modal-lable\">Session Name:</span>\n                                <input value={this.state.SessionName} onChange={(e) => this.stateHandler('SessionName', e)} />\n                            </div>\n                            \n                            <div className=\"content\">\n                                <span className=\"modal-lable\">Sync Directory:</span>\n                                <input value={this.state.SyncDirectory.Path} onChange={(e) => this.innerStateHandler('SyncDirectory', 'Path', e)} />\n                            </div>\n                            <div className=\"content\">\n                                <span className=\"modal-lable\">Bandwidth:</span>\n                                <input value={this.state.Bandwidth.Rate} onChange={(e) => this.innerStateHandler('Bandwidth', 'Rate', e)} />\n                            </div>\n                        </div> */}\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                            <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={() => { this.handleSave() }}>Save changes</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Modal;"]},"metadata":{},"sourceType":"module"}