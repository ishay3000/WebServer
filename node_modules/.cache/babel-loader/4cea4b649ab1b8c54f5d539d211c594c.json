{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/toor/Desktop/Ishay/ReactApps/client/src/Modal.js\";\nimport React, { Component } from 'react';\nimport './modal.css';\nimport { Modal, Button } from \"react-bootstrap\";\nimport './style.css';\nconst validEmailRegex = RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\n\nconst validateForm = errors => {\n  let valid = true;\n  Object.values(errors).forEach(val => val.length > 0 && (valid = false));\n  return valid;\n};\n\nclass MyModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      event.preventDefault();\n      const {\n        name,\n        value\n      } = event.target;\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'fullName':\n          errors.fullName = value.length < 5 ? 'Full Name must be 5 characters long!' : '';\n          break;\n\n        case 'email':\n          errors.email = validEmailRegex.test(value) ? '' : 'Email is not valid!';\n          break;\n\n        case 'password':\n          errors.password = value.length < 8 ? 'Password must be 8 characters long!' : '';\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors,\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      if (validateForm(this.state.errors)) {\n        console.info('Valid Form');\n      } else {\n        console.error('Invalid Form');\n      }\n    };\n\n    this.handleSave = this.handleSave.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    this.state = {\n      fullName: null,\n      email: null,\n      password: null,\n      errors: {\n        fullName: '',\n        email: '',\n        password: ''\n      }\n    }; // this.state = {\n    //     SessionName: '',\n    //     SyncDirectory: {},\n    //     Bandwidth: '',\n    //     modification: '',\n    //     errors: {},\n    //     show: false\n    // }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      SessionName: nextProps.SessionName,\n      SyncDirectory: {\n        'Path': nextProps.SyncDirectory.Path\n      },\n      Bandwidth: {\n        'Rate': nextProps.Bandwidth.Rate\n      },\n      modification: nextProps.Modification,\n      show: true\n    }); //this.handleShow()\n  }\n\n  stateHandler(stateName, e) {\n    this.setState({\n      [stateName]: e.target.value\n    });\n  }\n\n  innerStateHandler(stateName, innerStateName, e) {\n    this.setState({\n      [stateName]: {\n        [innerStateName]: e.target.value\n      }\n    });\n  }\n\n  handleValidation() {\n    const item = this.state;\n    const errors = [];\n    let formIsValid = true; //validate name\n\n    if (!item.SessionName) {\n      formIsValid = false;\n      errors[\"name\"] = \"Cannot be empty\";\n    }\n\n    if (typeof item.SessionName !== \"undefined\") {\n      if (!item.SessionName.match(/^[a-zA-Z]+$/)) {\n        formIsValid = false;\n        errors[\"name\"] = \"Only letters\";\n      }\n    }\n\n    this.setState({\n      errors: errors\n    });\n    return formIsValid;\n  }\n\n  handleSave() {\n    if (!this.handleValidation()) {\n      console.log(\"Validation error\");\n      return;\n    }\n\n    const item = this.state;\n    console.log(this.state.modification);\n    this.state.show = false;\n    this.props.saveModalDetails(item, this.state.modification);\n    console.log(this.state.show);\n    this.handleClose();\n  }\n\n  handleClose() {\n    this.setState({\n      show: false\n    });\n  }\n\n  handleShow() {\n    this.setState({\n      show: true\n    });\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      id: \"exampleModal\",\n      show: this.state.show,\n      onHide: this.handleClose,\n      keyboard: false,\n      size: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Modal title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: this.handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: this.handleSave,\n          children: \"Save changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default MyModal;","map":{"version":3,"sources":["/home/toor/Desktop/Ishay/ReactApps/client/src/Modal.js"],"names":["React","Component","Modal","Button","validEmailRegex","RegExp","validateForm","errors","valid","Object","values","forEach","val","length","MyModal","constructor","props","handleChange","event","preventDefault","name","value","target","state","fullName","email","test","password","setState","handleSubmit","console","info","error","handleSave","bind","handleClose","handleShow","componentWillReceiveProps","nextProps","SessionName","SyncDirectory","Path","Bandwidth","Rate","modification","Modification","show","stateHandler","stateName","e","innerStateHandler","innerStateName","handleValidation","item","formIsValid","match","log","saveModalDetails","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './modal.css'\nimport { Modal, Button } from \"react-bootstrap\";\nimport './style.css';\nconst validEmailRegex = RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\nconst validateForm = (errors) => {\n  let valid = true;\n  Object.values(errors).forEach(\n    (val) => val.length > 0 && (valid = false)\n  );\n  return valid;\n}\n\nclass MyModal extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSave = this.handleSave.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleShow = this.handleShow.bind(this);\n        this.state = {\n            fullName: null,\n            email: null,\n            password: null,\n            errors: {\n              fullName: '',\n              email: '',\n              password: '',\n            }\n          };\n        // this.state = {\n        //     SessionName: '',\n        //     SyncDirectory: {},\n        //     Bandwidth: '',\n        //     modification: '',\n        //     errors: {},\n        //     show: false\n        // }\n    }\n\n\n    handleChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n        let errors = this.state.errors;\n    \n        switch (name) {\n          case 'fullName': \n            errors.fullName = \n              value.length < 5\n                ? 'Full Name must be 5 characters long!'\n                : '';\n            break;\n          case 'email': \n            errors.email = \n              validEmailRegex.test(value)\n                ? ''\n                : 'Email is not valid!';\n            break;\n          case 'password': \n            errors.password = \n              value.length < 8\n                ? 'Password must be 8 characters long!'\n                : '';\n            break;\n          default:\n            break;\n        }\n    \n        this.setState({errors, [name]: value});\n      }\n\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            SessionName: nextProps.SessionName,\n            SyncDirectory: { 'Path': nextProps.SyncDirectory.Path },\n            Bandwidth: { 'Rate': nextProps.Bandwidth.Rate },\n            modification: nextProps.Modification,\n            show: true\n        });\n        //this.handleShow()\n    }\n    stateHandler(stateName, e) {\n        this.setState({ [stateName]: e.target.value })\n    }\n\n    innerStateHandler(stateName, innerStateName, e) {\n        this.setState({ [stateName]: { [innerStateName]: e.target.value } })\n    }\n    handleValidation() {\n        const item = this.state;\n        const errors = [];\n        let formIsValid = true;\n        //validate name\n        if (!item.SessionName) {\n            formIsValid = false;\n            errors[\"name\"] = \"Cannot be empty\";\n        }\n\n        if (typeof item.SessionName !== \"undefined\") {\n            if (!item.SessionName.match(/^[a-zA-Z]+$/)) {\n                formIsValid = false;\n                errors[\"name\"] = \"Only letters\";\n            }\n        }\n        this.setState({ errors: errors });\n        return formIsValid\n    }\n    handleSave() {\n        if (!this.handleValidation()) {\n            console.log(\"Validation error\")\n            return;\n        }\n        const item = this.state;\n        console.log(this.state.modification);\n        this.state.show = false;\n        this.props.saveModalDetails(item, this.state.modification)\n        console.log(this.state.show);\n        this.handleClose();\n    }\n\n    handleClose() {\n        this.setState({ show: false })\n\n    }\n    handleShow() {\n        this.setState({ show: true })\n\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if(validateForm(this.state.errors)) {\n          console.info('Valid Form')\n        }else{\n          console.error('Invalid Form')\n        }\n      }\n\n    render() {\n        const {errors} = this.state;\n        return (\n                <Modal\n                    id=\"exampleModal\"\n                    show={this.state.show}\n                    onHide={this.handleClose}\n                    keyboard={false}\n                    size=\"lg\"\n                >   \n                    <Modal.Header closeButton>\n                        <Modal.Title>Modal title</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {\n                            //   <div className='wrapper'>\n                            //   <div className='form-wrapper'>\n                            //     <h2>Create Account</h2>\n                            //     <form onSubmit={this.handleSubmit} noValidate>\n                            //       <div className='fullName'>\n                            //         <label htmlFor=\"fullName\">Full Name</label>\n                            //         <input type='text' name='fullName' onChange={this.handleChange} noValidate />\n                            //         {errors.fullName.length > 0 && \n                            //           <span className='error'>{errors.fullName}</span>}\n                            //       </div>\n                            //       <div className='email'>\n                            //         <label htmlFor=\"email\">Email</label>\n                            //         <input type='email' name='email' onChange={this.handleChange} noValidate />\n                            //         {errors.email.length > 0 && \n                            //           <span className='error'>{errors.email}</span>}\n                            //       </div>\n                            //       <div className='password'>\n                            //         <label htmlFor=\"password\">Password</label>\n                            //         <input type='password' name='password' onChange={this.handleChange} noValidate />\n                            //         {errors.password.length > 0 && \n                            //           <span className='error'>{errors.password}</span>}\n                            //       </div>\n                            //       <div className='info'>\n                            //         <small>Password must be eight characters in length.</small>\n                            //       </div>\n                            //       <div className='submit'>\n                            //         <button>Create</button>\n                            //       </div>\n                            //     </form>\n                            //   </div>\n                            // </div>\n                        \n                        \n                        /* <div className=\"content\">\n                            <span className=\"modal-lable\">Session Name:</span>\n                            <input value={this.state.SessionName} type=\"text\" onChange={(e) => this.stateHandler('SessionName', e)} />\n                        </div>\n                        <div className=\"content\">\n                            <span className=\"modal-lable\">Sync Directory:</span>\n                            <input value={this.state.SyncDirectory.Path} type=\"text\" onChange={(e) => this.innerStateHandler('SyncDirectory', 'Path', e)} />\n                        </div>\n                        <div className=\"content\">\n                            <span className=\"modal-lable\">Bandwidth:</span>\n                            <input value={this.state.Bandwidth.Rate} type=\"text\" onChange={(e) => this.innerStateHandler('Bandwidth', 'Rate', e)} />\n                        </div> */}\n                    </Modal.Body>\n                    {\n\n                        <div className=\"modal-footer\">\n                            \n                            <Button variant=\"secondary\" \n                            onClick={this.handleClose}>\n                                Close\n                            </Button>\n                            \n                            <Button variant=\"primary\"\n                            onClick={this.handleSave}>\n                                Save changes\n                                </Button>\n                        </div>\n                    }\n                </Modal>\n        );\n    }\n\n}\n\nexport default MyModal;"]},"metadata":{},"sourceType":"module"}