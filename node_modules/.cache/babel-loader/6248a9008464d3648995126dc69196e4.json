{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/toor/Desktop/Ishay/ReactApps/client/src/Config.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport MaterialTable from 'material-table';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn'; //JSON data from RESTful API\n\nvar user = {\n  \"user\": {\n    \"id\": 2,\n    \"email\": \"janet.weaver@reqres.in\",\n    \"first_name\": \"Janet\",\n    \"last_name\": \"Weaver\"\n  }\n};\nvar columns = [{\n  title: \"id\",\n  field: \"id\",\n  hidden: true\n}, {\n  title: \"First name\",\n  field: \"first_name\"\n}, {\n  title: \"Last name\",\n  field: \"last_name\"\n}, {\n  title: \"email\",\n  field: \"email\"\n}];\nexport default function Config() {\n  _s();\n\n  const [data, setData] = useState([]); //table data\n\n  useEffect(() => {\n    setData(user.data);\n  });\n  return /*#__PURE__*/_jsxDEV(MaterialTable, {\n    title: \"User list from API\",\n    columns: columns,\n    data: data,\n    icons: tableIcons,\n    editable: {\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        handleRowUpdate(newData, oldData, resolve);\n      }),\n      onRowAdd: newData => new Promise(resolve => {\n        handleRowAdd(newData, resolve);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        handleRowDelete(oldData, resolve);\n      })\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Config, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = Config;\n\nconst handleRowAdd = (newData, resolve) => {// //validation\n  // let errorList = []\n  // if (newData.first_name === undefined) {\n  //     errorList.push(\"Please enter first name\")\n  // }\n  // if (newData.last_name === undefined) {\n  //     errorList.push(\"Please enter last name\")\n  // }\n  // if (newData.email === undefined || validateEmail(newData.email) === false) {\n  //     errorList.push(\"Please enter a valid email\")\n  // }\n  // if (errorList.length < 1) { //no error\n  //     api.post(\"/users\", newData)\n  //         .then(res => {\n  //             let dataToAdd = [...data];\n  //             dataToAdd.push(newData);\n  //             setData(dataToAdd);\n  //             resolve()\n  //             setErrorMessages([])\n  //             setIserror(false)\n  //         })\n  //         .catch(error => {\n  //             setErrorMessages([\"Cannot add data. Server error!\"])\n  //             setIserror(true)\n  //             resolve()\n  //         })\n  // } else {\n  //     setErrorMessages(errorList)\n  //     setIserror(true)\n  //     resolve()\n  // }\n};\n\nconst handleRowUpdate = (newData, oldData, resolve) => {// //validation\n  // if (errorList.length < 1) {\n  //     api.patch(\"/users/\" + newData.id, newData)\n  //         .then(res => {\n  //             const dataUpdate = [...data];\n  //             const index = oldData.tableData.id;\n  //             dataUpdate[index] = newData;\n  //             setData([...dataUpdate]);\n  //             resolve()\n  //             setIserror(false)\n  //             setErrorMessages([])\n  //         })\n  //         .catch(error => {\n  //             setErrorMessages([\"Update failed! Server error\"])\n  //             setIserror(true)\n  //             resolve()\n  //         })\n  // } else {\n  //     setErrorMessages(errorList)\n  //     setIserror(true)\n  //     resolve()\n  // }\n};\n\nconst handleRowDelete = (oldData, resolve) => {// api.delete(\"/users/\" + oldData.id)\n  //     .then(res => {\n  //         const dataDelete = [...data];\n  //         const index = oldData.tableData.id;\n  //         dataDelete.splice(index, 1);\n  //         setData([...dataDelete]);\n  //         resolve()\n  //     })\n  //     .catch(error => {\n  //         setErrorMessages([\"Delete failed! Server error\"])\n  //         setIserror(true)\n  //         resolve()\n  //     })\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Config\");","map":{"version":3,"sources":["/home/toor/Desktop/Ishay/ReactApps/client/src/Config.js"],"names":["React","useEffect","useState","Axios","MaterialTable","AddBox","ArrowDownward","Check","ChevronLeft","ChevronRight","Clear","DeleteOutline","Edit","FilterList","FirstPage","LastPage","Remove","SaveAlt","Search","ViewColumn","user","columns","title","field","hidden","Config","data","setData","tableIcons","onRowUpdate","newData","oldData","Promise","resolve","handleRowUpdate","onRowAdd","handleRowAdd","onRowDelete","handleRowDelete"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Axios from 'axios';\nimport MaterialTable from 'material-table'\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\n\n//JSON data from RESTful API\nvar user = {\n    \"user\":\n    {\n        \"id\": 2,\n        \"email\": \"janet.weaver@reqres.in\",\n        \"first_name\": \"Janet\",\n        \"last_name\": \"Weaver\",\n    }\n}\n\nvar columns = [\n    { title: \"id\", field: \"id\", hidden: true },\n    { title: \"First name\", field: \"first_name\" },\n    { title: \"Last name\", field: \"last_name\" },\n    { title: \"email\", field: \"email\" }\n]\n\n\nexport default function Config() {\n    const [data, setData] = useState([]); //table data\n\n    useEffect(() => {\n        setData(user.data)\n    })\n    return (\n        <MaterialTable\n            title=\"User list from API\"\n            columns={columns}\n            data={data}\n            icons={tableIcons}\n            editable={{\n                onRowUpdate: (newData, oldData) =>\n                    new Promise((resolve) => {\n                        handleRowUpdate(newData, oldData, resolve);\n                    }),\n                onRowAdd: (newData) =>\n                    new Promise((resolve) => {\n                        handleRowAdd(newData, resolve)\n                    }),\n                onRowDelete: (oldData) =>\n                    new Promise((resolve) => {\n                        handleRowDelete(oldData, resolve)\n                    }),\n            }}\n        />\n    )\n}\n\nconst handleRowAdd = (newData, resolve) => {\n    // //validation\n    // let errorList = []\n    // if (newData.first_name === undefined) {\n    //     errorList.push(\"Please enter first name\")\n    // }\n    // if (newData.last_name === undefined) {\n    //     errorList.push(\"Please enter last name\")\n    // }\n    // if (newData.email === undefined || validateEmail(newData.email) === false) {\n    //     errorList.push(\"Please enter a valid email\")\n    // }\n    // if (errorList.length < 1) { //no error\n    //     api.post(\"/users\", newData)\n    //         .then(res => {\n    //             let dataToAdd = [...data];\n    //             dataToAdd.push(newData);\n    //             setData(dataToAdd);\n    //             resolve()\n    //             setErrorMessages([])\n    //             setIserror(false)\n    //         })\n    //         .catch(error => {\n    //             setErrorMessages([\"Cannot add data. Server error!\"])\n    //             setIserror(true)\n    //             resolve()\n    //         })\n    // } else {\n    //     setErrorMessages(errorList)\n    //     setIserror(true)\n    //     resolve()\n    // }\n}\n\nconst handleRowUpdate = (newData, oldData, resolve) => {\n    // //validation\n    // if (errorList.length < 1) {\n    //     api.patch(\"/users/\" + newData.id, newData)\n    //         .then(res => {\n    //             const dataUpdate = [...data];\n    //             const index = oldData.tableData.id;\n    //             dataUpdate[index] = newData;\n    //             setData([...dataUpdate]);\n    //             resolve()\n    //             setIserror(false)\n    //             setErrorMessages([])\n    //         })\n    //         .catch(error => {\n    //             setErrorMessages([\"Update failed! Server error\"])\n    //             setIserror(true)\n    //             resolve()\n    //         })\n    // } else {\n    //     setErrorMessages(errorList)\n    //     setIserror(true)\n    //     resolve()\n    // }\n}\n\nconst handleRowDelete = (oldData, resolve) => {\n    // api.delete(\"/users/\" + oldData.id)\n    //     .then(res => {\n    //         const dataDelete = [...data];\n    //         const index = oldData.tableData.id;\n    //         dataDelete.splice(index, 1);\n    //         setData([...dataDelete]);\n    //         resolve()\n    //     })\n    //     .catch(error => {\n    //         setErrorMessages([\"Delete failed! Server error\"])\n    //         setIserror(true)\n    //         resolve()\n    //     })\n}"]},"metadata":{},"sourceType":"module"}